{"mappings":"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","sources":["src/index.ts","src/ela.ts","src/helpers/index.ts","src/helpers/extend-config.ts","src/helpers/get-shortcut-by-event.ts"],"sourcesContent":["export { ELAComponent } from './ela';\n","import './ela.scss';\n\n// @ts-ignore\nimport jQuery from 'jquery';\nimport { extendConfig, getShortcutByEvent } from './helpers';\n\nconst HELPER_ACTIVE_CLASS = 'ela-active';\nconst TOOLTIP_INVERTED_CLASS = 'ela-inverted';\nconst UPDATE_SERVICE_ATTRS_INTERVAL = 3000;\n\nconst TEST_ID_ATTR = 'data-test-id';\nconst TEST_PARAMS_ATTR = 'data-test-params';\nconst PSEUDO_ID_ATTR = 'data-test-pseudo-id';\nconst PSEUDO_NAME_ATTR = 'data-test-pseudo-name';\n\nexport interface ELAConfig {\n    customSelectorPrefix: string\n    pseudoSelectorPrefix: string\n    activateShortcut: string\n    relocateShortcut: string\n    pseudoSelectorMap: Record<string, string>\n}\n\nconst defaultConfig: ELAConfig = {\n    customSelectorPrefix: '%',\n    pseudoSelectorPrefix: '%%',\n    activateShortcut: 'ctrl+alt+l',\n    relocateShortcut: 'ctrl+alt+p',\n    pseudoSelectorMap: {}\n};\n\nexport function ELAComponent(userConfig: ELAConfig) {\n    const config = extendConfig(defaultConfig, userConfig);\n    const {customSelectorPrefix, pseudoSelectorPrefix, pseudoSelectorMap} = config;\n    let attachInterval;\n\n    document.addEventListener('keydown', onKeyDown);\n    document.body.style.setProperty('--custom-prefix', `'${customSelectorPrefix}'`)\n    document.body.style.setProperty('--pseudo-prefix', `'${pseudoSelectorPrefix}'`)\n\n    return function destroy() {\n        onHelperToggle(false);\n        document.removeEventListener('keydown', onKeyDown);\n    }\n\n    ///\n\n    function onKeyDown(e: KeyboardEvent) {\n        const shortcut = getShortcutByEvent(e);\n\n        switch (shortcut) {\n            case config.activateShortcut.toUpperCase():\n                onHelperToggle();\n                break;\n            case config.relocateShortcut.toUpperCase():\n                onTooltipPositionToggle();\n                break;\n        }\n    }\n\n    function onHelperToggle(value = !document.body.classList.contains(HELPER_ACTIVE_CLASS)) {\n        if (value) {\n            document.body.classList.add(HELPER_ACTIVE_CLASS);\n            document.addEventListener('click', onGlobalClick);\n            attachInterval = setInterval(attachServiceAttrs, UPDATE_SERVICE_ATTRS_INTERVAL);\n            attachServiceAttrs();\n        } else {\n            document.body.classList.remove(HELPER_ACTIVE_CLASS);\n            document.removeEventListener('click', onGlobalClick);\n            clearInterval(attachInterval);\n        }\n    }\n\n    function onTooltipPositionToggle() {\n        document.body.classList.toggle(TOOLTIP_INVERTED_CLASS);\n    }\n\n    function onGlobalClick(event) {\n        const targetEl = event.target;\n        if (targetEl?.hasAttribute(TEST_ID_ATTR) || targetEl?.hasAttribute(PSEUDO_ID_ATTR)) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            if (event.ctrlKey) { // copy full pseudo-path if ctrl is pressed\n                const isPseudo = targetEl.hasAttribute(PSEUDO_ID_ATTR);\n                const parents = jQuery(targetEl).parents()\n                    .filter((i, parentEl) => (\n                        parentEl.hasAttribute(TEST_ID_ATTR) ||\n                        isPseudo && parentEl.hasAttribute(PSEUDO_ID_ATTR)\n                    ))\n                    .toArray();\n\n                const pseudoQuery = [...parents.reverse(), targetEl]\n                    .map(el => extractPseudoSelector(el))\n                    .join(' ');\n\n                copyToClipboard(pseudoQuery);\n            } else {\n                const pseudoSelector = extractPseudoSelector(targetEl);\n                copyToClipboard(pseudoSelector);\n            }\n        }\n    }\n\n    ///\n\n    function attachServiceAttrs() {\n        attachPseudoAttrs();\n        attachParamsAttrs();\n    }\n\n    function attachPseudoAttrs() {\n        for (let pseudoSelector in pseudoSelectorMap) {\n            const rawSelector = pseudoSelectorMap[pseudoSelector];\n            const selector = rawSelector.replace(/=?\\$name/gi, '');\n            const pseudoId = pseudoSelector.replace(/=\\$name/gi, '');\n\n            jQuery(selector).each((index, el) => {\n                el.setAttribute(PSEUDO_ID_ATTR, pseudoId);\n                if (rawSelector.includes('$name') && !el.hasAttribute(PSEUDO_NAME_ATTR)) {\n                    setPseudoNameAttr(el, selector);\n                }\n                if (!el.hasAttribute(TEST_PARAMS_ATTR)) {\n                    setTestParamsAttr(el);\n                }\n            });\n        }\n    }\n\n    function attachParamsAttrs(): void {\n        const elements = jQuery(`[${TEST_ID_ATTR}]`).toArray();\n        for (let el of elements) {\n            if (el.hasAttribute(TEST_PARAMS_ATTR)) continue;\n            setTestParamsAttr(el);\n        }\n    }\n\n    function setPseudoNameAttr(el: HTMLElement, selector: string): void {\n        const innerSelector = selector\n            .replace(':has', ' :is')\n            .replace(/^[^\\s]+\\s/, '');\n\n        switch (true) {\n            /* Name from Text Content */\n            case selector.includes(':contains()'): {\n                const targetSelector = innerSelector.replaceAll(':contains()', '');\n                const [targetEl] = targetSelector ? jQuery(el).find(targetSelector).toArray() : [el];\n                const containedText = (targetEl ?? el).textContent.trim().replace(/\\s+/g, ' ');\n                const name = `\"${containedText}\"`;\n\n                el.setAttribute(PSEUDO_NAME_ATTR, name);\n                break;\n            }\n            /* Name from an Attr */\n            case selector.includes('['): {\n                const foundEls = innerSelector ? jQuery(el).find(innerSelector).toArray() : [el];\n                const [,nameAttr] = /\\[([a-z0-9_\\-]+)\\]/.exec(innerSelector)\n                const name = foundEls.map(targetEl => `\"${targetEl.getAttribute(nameAttr)}\"`).join('|')\n\n                el.setAttribute(PSEUDO_NAME_ATTR, name);\n                break;\n            }\n        }\n    }\n\n    function setTestParamsAttr(el: HTMLElement): void {\n        const paramsList = el.getAttributeNames()\n            .map(attrName => /^data-test-(?<paramName>.+)-spec$/.exec(attrName))\n            .filter(Boolean)\n            .map((match) => `${match.groups.paramName}=${el.getAttribute(match.input)}`);\n\n        if (paramsList.length) {\n            el.setAttribute(TEST_PARAMS_ATTR, `%(${paramsList.join(',')})`);\n        }\n    }\n\n    function extractPseudoSelector(el: HTMLElement): string {\n        const {content} = window.getComputedStyle(el, '::before');\n        return content.slice(1, -1).replace(/\\\\/g, '');\n    }\n\n    function copyToClipboard(text: string): void {\n        navigator.clipboard?.writeText(text);\n    }\n}\n","export * from './extend-config';\nexport * from './get-shortcut-by-event';","export function extendConfig<T>(baseConfig: T, userConfig: Partial<T>): T {\n    const config = JSON.parse(JSON.stringify(userConfig));\n    return Object.assign({}, baseConfig, config)\n}\n","const keysMap = {\n    ctrlKey: 'ctrl',\n    shiftKey: 'shift',\n    altKey: 'alt'\n};\n\nexport function getShortcutByEvent(e: KeyboardEvent): string {\n    const key = e.keyCode > 18 ? e.code.replace(/^Key/, '') : '';\n    const specialPart = Object.entries(keysMap)\n        .reduce((result, [key, name]) =>\n            e[key] ? result.concat(name) : result,\n            []\n        )\n\n    return [...specialPart, key].filter(Boolean)\n        .join('+')\n        .toUpperCase();\n}"],"names":[],"version":3,"file":"main.js.map"}